/*
MIT License

Copyright (c) 2019 Markus Heene <Markus.Heene@dwd.de>

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/
apply plugin: 'java'
apply plugin: 'antlr'
apply plugin: 'application'


// Include dependent libraries in archive.
mainClassName = 'Counter'


jar {
  group = "BUFR Grammar"
  description = "Builds a JAR file with Counter as executable location: build/libs"
  archiveBaseName = 'counter'
  archiveVersion =  '0.0.1'
 
  
  manifest { 
    attributes "Main-Class": "$mainClassName"
  }  

  from {
    configurations.compileClasspath.collect { it.isDirectory() ? it : zipTree(it) }
  }

  doLast {
    println "Location of the JAR file: build/libs/"
  }
}


sourceCompatibility = 1.8

repositories {
    mavenCentral()
}


tasks.withType(JavaCompile) {
    options.compilerArgs += ['-Xlint:deprecation']
}

task copyTestResources(type: Copy) {
    from "${projectDir}/material/"
    into "${buildDir}/classes/java/test"
}


task copyGrammar(type: Copy) {
    from "${projectDir}/src/main/antlr/" , "src/main/python/"
    into "${buildDir}/python/main"
}



task generatePythonCode(type: JavaExec) {
  group = "BUFR Grammar"
  description = "ANTLR  task: "
  description += "gradlew generatePythonCode"

  dependsOn copyGrammar    
  classpath = sourceSets.main.runtimeClasspath
  workingDir = "${buildDir}/python/main"
  main = 'org.antlr.v4.Tool'
  def preDef = ["-Dlanguage=Python3", "BUFR.g4"]
  args = preDef 
 
}

task pythonDist(type: Tar) {
  group = "BUFR Grammar"
  description = "Builds Python distribution: build/dist/ "
  dependsOn generatePythonCode
  from "${buildDir}/python/main"
  archiveBaseName = 'bufr-grammar'
  destinationDirectory = file("${buildDir}/dist")
  archiveExtension = 'tgz'
  compression = Compression.GZIP
}

task runPythonCode(type:Exec) {
  group = "BUFR Grammar"
  description = "ANTLR runPythonCode task: "
  description += "gradlew runPythoncode -PinputFile=material/valid/301003.txt"
  dependsOn generatePythonCode
  
  doFirst {
    if (!project.hasProperty('inputFile')) 
        throw new GradleException("Missing parameter.\n Usage: gradlew runPythoncode -PinputFile=material/valid/301003.txt")
  }

  workingDir = "${buildDir}/python/main"
  if (project.hasProperty('inputFile')) {
    def cmdArgs = (inputFile.split(','))
    def inputFile = '../../../' + cmdArgs[0] // crude fix 
    commandLine 'python' , 'BUFRStart.py', inputFile  
  }

}
task grun(type: JavaExec) {
  group = "BUFR Grammar"
  description = "ANTLR grun task: "
  description += "gradlew grun -PinputFile=material/valid/301003.txt"

  doFirst {
    if (!project.hasProperty('inputFile')) 
        throw new GradleException("Missing parameter.\n Usage: gradlew grun -PinputFile=material/valid/301003.txt")
  }
  
  classpath = sourceSets.main.runtimeClasspath

  main = 'org.antlr.v4.gui.TestRig'
  if (project.hasProperty('inputFile')) {
      def cmdArgs = (inputFile.split(','))
      def preDef = ["BUFR", "template", "-gui"]
      args = preDef + cmdArgs[0]
  } 
 
}

test {
    useJUnit()
      doLast {
      	     println "Location of the testreport: build/reports/tests/test/index.html" 
      }
}


test.dependsOn copyTestResources

dependencies {
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.1.0'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.1.0'
    testImplementation 'junit:junit:4.12'
    testRuntimeOnly 'org.junit.vintage:junit-vintage-engine:5.1.0'
    antlr "org.antlr:antlr4:4.8-1" // use ANTLR version 4
  
}
